{"ast":null,"code":"import axios from 'axios';\nimport { CART_ADD_ITEM, CART_REMOVE_ITEM, CART_SAVE_SHIPPING_ADDRESS, CART_SAVE_PAYMENT_METHOD } from '../constants/cartConstants';\n\n// get the product id and the quantity of the item to add to the cart\nexport const addItem = (id, qty) => async (dispatch, getState) => {\n  try {\n    const {\n      data\n    } = await axios.get(`/api/products/${id}`);\n    dispatch({\n      type: CART_ADD_ITEM,\n      payload: {\n        product: data._id,\n        name: data.name,\n        image: data.image,\n        price: data.price,\n        countInStock: data.countInStock,\n        qty\n      }\n    });\n\n    // update the local storage with the new cart\n    localStorage.setItem('cartItems', JSON.stringify(getState().cart.cartItems));\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n// get the product id to be removed from the cart\nexport const removeItem = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: CART_REMOVE_ITEM,\n      payload: id\n    });\n    // update the local storage with the updated cart\n    localStorage.setItem('cartItems', JSON.stringify(getState().cart.cartItems));\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// get the shipping address data and dispatch corresponding action\nexport const saveShippingAddress = data => async dispatch => {\n  try {\n    dispatch({\n      type: CART_SAVE_SHIPPING_ADDRESS,\n      payload: data\n    });\n    localStorage.setItem('shippingAddress', JSON.stringify(data));\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// get the option for payment and update the local storage as well\nexport const savePaymentMethod = data => async dispatch => {\n  try {\n    dispatch({\n      type: CART_SAVE_PAYMENT_METHOD,\n      payload: data\n    });\n    localStorage.setItem('paymentMethod', JSON.stringify(data));\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["axios","CART_ADD_ITEM","CART_REMOVE_ITEM","CART_SAVE_SHIPPING_ADDRESS","CART_SAVE_PAYMENT_METHOD","addItem","id","qty","dispatch","getState","data","get","type","payload","product","_id","name","image","price","countInStock","localStorage","setItem","JSON","stringify","cart","cartItems","error","console","removeItem","log","saveShippingAddress","savePaymentMethod"],"sources":["C:/Users/karmo/Downloads/Ecommerce Website/MERN-Ecommerce-main/frontend/src/actions/cartActions.js"],"sourcesContent":["import axios from 'axios';\nimport {\n\tCART_ADD_ITEM,\n\tCART_REMOVE_ITEM,\n\tCART_SAVE_SHIPPING_ADDRESS,\n\tCART_SAVE_PAYMENT_METHOD,\n} from '../constants/cartConstants';\n\n// get the product id and the quantity of the item to add to the cart\nexport const addItem = (id, qty) => async (dispatch, getState) => {\n\ttry {\n\t\tconst { data } = await axios.get(`/api/products/${id}`);\n\t\tdispatch({\n\t\t\ttype: CART_ADD_ITEM,\n\t\t\tpayload: {\n\t\t\t\tproduct: data._id,\n\t\t\t\tname: data.name,\n\t\t\t\timage: data.image,\n\t\t\t\tprice: data.price,\n\t\t\t\tcountInStock: data.countInStock,\n\t\t\t\tqty,\n\t\t\t},\n\t\t});\n\n\t\t// update the local storage with the new cart\n\t\tlocalStorage.setItem(\n\t\t\t'cartItems',\n\t\t\tJSON.stringify(getState().cart.cartItems)\n\t\t);\n\t} catch (error) {\n\t\tconsole.error(error);\n\t}\n};\n\n// get the product id to be removed from the cart\nexport const removeItem = (id) => async (dispatch, getState) => {\n\ttry {\n\t\tdispatch({\n\t\t\ttype: CART_REMOVE_ITEM,\n\t\t\tpayload: id,\n\t\t});\n\t\t// update the local storage with the updated cart\n\t\tlocalStorage.setItem(\n\t\t\t'cartItems',\n\t\t\tJSON.stringify(getState().cart.cartItems)\n\t\t);\n\t} catch (error) {\n\t\tconsole.log(error);\n\t}\n};\n\n// get the shipping address data and dispatch corresponding action\nexport const saveShippingAddress = (data) => async (dispatch) => {\n\ttry {\n\t\tdispatch({\n\t\t\ttype: CART_SAVE_SHIPPING_ADDRESS,\n\t\t\tpayload: data,\n\t\t});\n\t\tlocalStorage.setItem('shippingAddress', JSON.stringify(data));\n\t} catch (error) {\n\t\tconsole.log(error);\n\t}\n};\n\n// get the option for payment and update the local storage as well\nexport const savePaymentMethod = (data) => async (dispatch) => {\n\ttry {\n\t\tdispatch({\n\t\t\ttype: CART_SAVE_PAYMENT_METHOD,\n\t\t\tpayload: data,\n\t\t});\n\t\tlocalStorage.setItem('paymentMethod', JSON.stringify(data));\n\t} catch (error) {\n\t\tconsole.log(error);\n\t}\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SACCC,aAAa,EACbC,gBAAgB,EAChBC,0BAA0B,EAC1BC,wBAAwB,QAClB,4BAA4B;;AAEnC;AACA,OAAO,MAAMC,OAAO,GAAGA,CAACC,EAAE,EAAEC,GAAG,KAAK,OAAOC,QAAQ,EAAEC,QAAQ,KAAK;EACjE,IAAI;IACH,MAAM;MAAEC;IAAK,CAAC,GAAG,MAAMV,KAAK,CAACW,GAAG,CAAE,iBAAgBL,EAAG,EAAC,CAAC;IACvDE,QAAQ,CAAC;MACRI,IAAI,EAAEX,aAAa;MACnBY,OAAO,EAAE;QACRC,OAAO,EAAEJ,IAAI,CAACK,GAAG;QACjBC,IAAI,EAAEN,IAAI,CAACM,IAAI;QACfC,KAAK,EAAEP,IAAI,CAACO,KAAK;QACjBC,KAAK,EAAER,IAAI,CAACQ,KAAK;QACjBC,YAAY,EAAET,IAAI,CAACS,YAAY;QAC/BZ;MACD;IACD,CAAC,CAAC;;IAEF;IACAa,YAAY,CAACC,OAAO,CACnB,WAAW,EACXC,IAAI,CAACC,SAAS,CAACd,QAAQ,CAAC,CAAC,CAACe,IAAI,CAACC,SAAS,CACzC,CAAC;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACfC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;EACrB;AACD,CAAC;;AAED;AACA,OAAO,MAAME,UAAU,GAAItB,EAAE,IAAK,OAAOE,QAAQ,EAAEC,QAAQ,KAAK;EAC/D,IAAI;IACHD,QAAQ,CAAC;MACRI,IAAI,EAAEV,gBAAgB;MACtBW,OAAO,EAAEP;IACV,CAAC,CAAC;IACF;IACAc,YAAY,CAACC,OAAO,CACnB,WAAW,EACXC,IAAI,CAACC,SAAS,CAACd,QAAQ,CAAC,CAAC,CAACe,IAAI,CAACC,SAAS,CACzC,CAAC;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACfC,OAAO,CAACE,GAAG,CAACH,KAAK,CAAC;EACnB;AACD,CAAC;;AAED;AACA,OAAO,MAAMI,mBAAmB,GAAIpB,IAAI,IAAK,MAAOF,QAAQ,IAAK;EAChE,IAAI;IACHA,QAAQ,CAAC;MACRI,IAAI,EAAET,0BAA0B;MAChCU,OAAO,EAAEH;IACV,CAAC,CAAC;IACFU,YAAY,CAACC,OAAO,CAAC,iBAAiB,EAAEC,IAAI,CAACC,SAAS,CAACb,IAAI,CAAC,CAAC;EAC9D,CAAC,CAAC,OAAOgB,KAAK,EAAE;IACfC,OAAO,CAACE,GAAG,CAACH,KAAK,CAAC;EACnB;AACD,CAAC;;AAED;AACA,OAAO,MAAMK,iBAAiB,GAAIrB,IAAI,IAAK,MAAOF,QAAQ,IAAK;EAC9D,IAAI;IACHA,QAAQ,CAAC;MACRI,IAAI,EAAER,wBAAwB;MAC9BS,OAAO,EAAEH;IACV,CAAC,CAAC;IACFU,YAAY,CAACC,OAAO,CAAC,eAAe,EAAEC,IAAI,CAACC,SAAS,CAACb,IAAI,CAAC,CAAC;EAC5D,CAAC,CAAC,OAAOgB,KAAK,EAAE;IACfC,OAAO,CAACE,GAAG,CAACH,KAAK,CAAC;EACnB;AACD,CAAC"},"metadata":{},"sourceType":"module"}