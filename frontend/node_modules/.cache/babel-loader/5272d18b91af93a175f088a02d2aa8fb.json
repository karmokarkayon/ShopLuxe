{"ast":null,"code":"import { USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGIN_FAILURE, USER_LOGIN_REFRESH_REQUEST, USER_LOGIN_REFRESH_SUCCESS, USER_LOGIN_REFRESH_FAILURE, USER_LOGOUT, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_REGISTER_FAILURE, USER_RESET_PASSWORD_REQUEST, USER_RESET_PASSWORD_SUCCESS, USER_RESET_PASSWORD_FAILURE, USER_EMAIL_VERIFICATION_REQUEST, USER_EMAIL_VERIFICATION_SUCCESS, USER_EMAIL_VERIFICATION_FAILURE, USER_CONFIRM_REQUEST, USER_CONFIRM_SUCCESS, USER_CONFIRM_FAILURE, USER_DETAILS_REQUEST, USER_DETAILS_SUCCESS, USER_DETAILS_FAILURE, USER_DETAILS_RESET, USER_PROFILE_UPDATE_REQUEST, USER_PROFILE_UPDATE_SUCCESS, USER_PROFILE_UPDATE_FAILURE, USER_LIST_REQUEST, USER_LIST_SUCCESS, USER_LIST_FAILURE, USER_DELETE_REQUEST, USER_DELETE_SUCCESS, USER_DELETE_FAILURE, USER_UPDATE_REQUEST, USER_UPDATE_SUCCESS, USER_UPDATE_FAILURE } from '../constants/userConstants';\nimport { ORDER_CREATE_RESET, ORDER_USER_LIST_RESET } from '../constants/orderConstants';\nimport axios from 'axios';\n\n// login an user, can be a social login or a normal email verified login\nexport const loginUser = (email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/users/login', {\n      email,\n      password\n    }, config);\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: {\n        ...data,\n        isSocialLogin: false\n      }\n    });\n    dispatch({\n      type: USER_LOGIN_REFRESH_SUCCESS,\n      payload: data.refreshToken\n    });\n    // store the refresh token and the rest of the user info in the local storage\n    localStorage.setItem('refreshToken', data.refreshToken);\n    localStorage.setItem('userInfo', JSON.stringify({\n      ...data,\n      isSocialLogin: false\n    }));\n    // remove the variable that helps prompt the user that email is not verified, each time they login\n    localStorage.removeItem('promptEmailVerfication');\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAILURE,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\n\n// used for refreshing the access tokens when the user logs in using email and password\nexport const refreshLogin = email => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REFRESH_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n\n    // avoid this if social login\n    if (userInfo.isSocialLogin) {\n      dispatch({\n        type: USER_LOGIN_REFRESH_SUCCESS,\n        payload: null\n      });\n    } else {\n      const config = {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      const {\n        data\n      } = await axios.post('/api/users/refresh', {\n        email,\n        token: userInfo.refreshToken\n      }, config);\n      if (data.success) {\n        dispatch({\n          type: USER_LOGIN_REFRESH_SUCCESS,\n          payload: data\n        });\n        const updatedUser = {\n          ...userInfo,\n          accessToken: data.accessToken,\n          refreshToken: userInfo.refreshToken\n        };\n        // update the local storage\n        localStorage.setItem('userInfo', JSON.stringify(updatedUser));\n        dispatch({\n          type: USER_LOGIN_SUCCESS,\n          payload: updatedUser\n        });\n      } else if (!data.success) {\n        // set a variable in local storage which redirects to login page, if this refresh thing fails\n        localStorage.removeItem('userInfo');\n        localStorage.setItem('redirectLogin', 'true'); // after refresh token also expires, redirect to login page after loggin out the user\n        dispatch({\n          type: USER_LOGOUT\n        });\n      }\n    }\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_REFRESH_FAILURE,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\n\n// logout by removing all local storage info\nexport const logoutUser = () => dispatch => {\n  localStorage.removeItem('userInfo');\n  localStorage.removeItem('redirectLogin');\n  localStorage.removeItem('cartItems');\n  dispatch({\n    type: USER_LOGOUT\n  });\n  dispatch({\n    type: USER_DETAILS_RESET\n  });\n  dispatch({\n    type: ORDER_CREATE_RESET\n  });\n  dispatch({\n    type: ORDER_USER_LIST_RESET\n  });\n};\n\n// register a new user with the form for name, email, password\nexport const registerUser = (name, email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_REGISTER_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/users/', {\n      name,\n      email,\n      password\n    }, config);\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAILURE,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\n\n// send an email for verification of the newly registered account\nexport const sendVerficationEmail = email => async dispatch => {\n  try {\n    dispatch({\n      type: USER_EMAIL_VERIFICATION_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/users/confirm', {\n      email\n    }, config);\n    dispatch({\n      type: USER_EMAIL_VERIFICATION_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_EMAIL_VERIFICATION_FAILURE,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\n\n// take the email token sent from the mail, and confirm the account once the link is clicked\nexport const confirmUser = function (emailToken) {\n  let alreadyLoggedIn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: USER_CONFIRM_REQUEST\n      });\n      const {\n        data\n      } = await axios.get(`/api/users/confirm/${emailToken}`);\n\n      // remove variable meant to prompt the user for email verification\n      localStorage.removeItem('promptEmailVerfication');\n      dispatch({\n        type: USER_CONFIRM_SUCCESS,\n        payload: true\n      });\n      if (alreadyLoggedIn) {\n        dispatch({\n          type: USER_LOGIN_SUCCESS,\n          payload: data\n        });\n        dispatch({\n          type: USER_LOGIN_REFRESH_SUCCESS,\n          payload: data.refreshToken\n        });\n        localStorage.setItem('refreshToken', data.refreshToken);\n        localStorage.setItem('userInfo', JSON.stringify(data));\n      }\n      localStorage.removeItem('promptEmailVerfication');\n    } catch (error) {\n      dispatch({\n        type: USER_CONFIRM_FAILURE,\n        payload: error.response && error.response.data.message ? error.response.data.message : error.message\n      });\n    }\n  };\n};\n\n// reset the user password and send one more verification email from the server\nexport const resetUserPassword = (passwordToken, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_RESET_PASSWORD_REQUEST\n    });\n\n    // make the api call to reset the password\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.put('/api/users/reset', {\n      passwordToken,\n      password\n    }, config);\n    dispatch({\n      type: USER_RESET_PASSWORD_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_RESET_PASSWORD_FAILURE,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\n\n// get user details for profile page\nexport const getUserDetails = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_DETAILS_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    if (userInfo.isSocialLogin) {\n      const config = {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      let {\n        data\n      } = await axios.post('/api/users/passport/data/', {\n        id\n      }, config);\n      dispatch({\n        type: USER_DETAILS_SUCCESS,\n        payload: {\n          ...data,\n          isSocialLogin: true\n        }\n      });\n    } else {\n      const config = {\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${userInfo.accessToken}`\n        }\n      };\n      const {\n        data\n      } = await axios.get(`/api/users/${id}`, config);\n      dispatch({\n        type: USER_DETAILS_SUCCESS,\n        payload: {\n          ...data,\n          isSocialLogin: false\n        }\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: USER_DETAILS_FAILURE,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\n\n// update details in the user profile page\nexport const updateUserProfile = user => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_PROFILE_UPDATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n\n    // different headers are used when it is a social login, and when it is a std email login\n    const config = userInfo.isSocialLogin ? {\n      headers: {\n        Authorization: `SocialLogin ${userInfo.id}`\n      }\n    } : {\n      headers: {\n        Authorization: `Bearer ${userInfo.accessToken}`\n      }\n    };\n    const isSocial = userInfo.isSocialLogin;\n    const {\n      data\n    } = await axios.put('/api/users/profile', user, config);\n    dispatch({\n      type: USER_PROFILE_UPDATE_SUCCESS,\n      payload: {\n        ...data,\n        isSocialLogin: isSocial\n      }\n    });\n\n    // login the user after updating the information\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: {\n        ...data,\n        isSocialLogin: isSocial\n      }\n    });\n    localStorage.setItem('userInfo', JSON.stringify({\n      ...data,\n      isSocialLogin: isSocial\n    }));\n  } catch (error) {\n    dispatch({\n      type: USER_PROFILE_UPDATE_FAILURE,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\n\n// fetch a list of all users, for the admin panel view\nexport const listAllUsers = function () {\n  let pageNumber = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: USER_LIST_REQUEST\n      });\n      const {\n        userLogin: {\n          userInfo\n        }\n      } = getState();\n\n      // different headers are used when it is a social login, and when it is a std email login\n      const config = userInfo.isSocialLogin ? {\n        headers: {\n          Authorization: `SocialLogin ${userInfo.id}`\n        }\n      } : {\n        headers: {\n          Authorization: `Bearer ${userInfo.accessToken}`\n        }\n      };\n      const {\n        data\n      } = await axios.get(`/api/users?pageNumber=${pageNumber}`, config);\n      dispatch({\n        type: USER_LIST_SUCCESS,\n        payload: data\n      });\n    } catch (error) {\n      dispatch({\n        type: USER_LIST_FAILURE,\n        payload: error.response && error.response.data.message ? error.response.data.message : error.message\n      });\n    }\n  };\n};\n\n// delete the user from the admin panel view\nexport const deleteUser = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_DELETE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n\n    // different headers are used when it is a social login, and when it is a std email login\n    const config = userInfo.isSocialLogin ? {\n      headers: {\n        Authorization: `SocialLogin ${userInfo.id}`\n      }\n    } : {\n      headers: {\n        Authorization: `Bearer ${userInfo.accessToken}`\n      }\n    };\n    await axios.delete(`/api/users/${id}`, config);\n    dispatch({\n      type: USER_DELETE_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_DELETE_FAILURE,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\n\n// update the user details\nexport const updateUser = user => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_UPDATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = userInfo.isSocialLogin ? {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `SocialLogin ${userInfo.id}`\n      }\n    } : {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.accessToken}`\n      }\n    };\n    const isSocial = userInfo.isSocialLogin;\n    const {\n      data\n    } = await axios.put(`/api/users/${user._id}`, user, config);\n    dispatch({\n      type: USER_UPDATE_SUCCESS\n    });\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: {\n        ...data,\n        isSocialLogin: isSocial\n      }\n    });\n    if (data.id === userInfo.id) {\n      // // login the user after updating the information\n      const newUserInfo = {\n        ...userInfo,\n        ...userInfo,\n        id: data.id,\n        name: data.name,\n        email: data.email,\n        isAdmin: data.isAdmin,\n        isConfirmed: data.isConfirmed\n      };\n      dispatch({\n        type: USER_LOGIN_SUCCESS,\n        payload: newUserInfo\n      });\n      localStorage.setItem('userInfo', JSON.stringify(newUserInfo));\n    }\n  } catch (error) {\n    dispatch({\n      type: USER_UPDATE_FAILURE,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"names":["USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGIN_FAILURE","USER_LOGIN_REFRESH_REQUEST","USER_LOGIN_REFRESH_SUCCESS","USER_LOGIN_REFRESH_FAILURE","USER_LOGOUT","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_REGISTER_FAILURE","USER_RESET_PASSWORD_REQUEST","USER_RESET_PASSWORD_SUCCESS","USER_RESET_PASSWORD_FAILURE","USER_EMAIL_VERIFICATION_REQUEST","USER_EMAIL_VERIFICATION_SUCCESS","USER_EMAIL_VERIFICATION_FAILURE","USER_CONFIRM_REQUEST","USER_CONFIRM_SUCCESS","USER_CONFIRM_FAILURE","USER_DETAILS_REQUEST","USER_DETAILS_SUCCESS","USER_DETAILS_FAILURE","USER_DETAILS_RESET","USER_PROFILE_UPDATE_REQUEST","USER_PROFILE_UPDATE_SUCCESS","USER_PROFILE_UPDATE_FAILURE","USER_LIST_REQUEST","USER_LIST_SUCCESS","USER_LIST_FAILURE","USER_DELETE_REQUEST","USER_DELETE_SUCCESS","USER_DELETE_FAILURE","USER_UPDATE_REQUEST","USER_UPDATE_SUCCESS","USER_UPDATE_FAILURE","ORDER_CREATE_RESET","ORDER_USER_LIST_RESET","axios","loginUser","email","password","dispatch","type","config","headers","data","post","payload","isSocialLogin","refreshToken","localStorage","setItem","JSON","stringify","removeItem","error","response","message","refreshLogin","getState","userLogin","userInfo","token","success","updatedUser","accessToken","logoutUser","registerUser","name","sendVerficationEmail","confirmUser","emailToken","alreadyLoggedIn","arguments","length","undefined","get","resetUserPassword","passwordToken","put","getUserDetails","id","Authorization","updateUserProfile","user","isSocial","listAllUsers","pageNumber","deleteUser","delete","updateUser","_id","newUserInfo","isAdmin","isConfirmed"],"sources":["C:/Users/karmo/Downloads/Ecommerce Website/MERN-Ecommerce-main/frontend/src/actions/userActions.js"],"sourcesContent":["import {\n\tUSER_LOGIN_REQUEST,\n\tUSER_LOGIN_SUCCESS,\n\tUSER_LOGIN_FAILURE,\n\tUSER_LOGIN_REFRESH_REQUEST,\n\tUSER_LOGIN_REFRESH_SUCCESS,\n\tUSER_LOGIN_REFRESH_FAILURE,\n\tUSER_LOGOUT,\n\tUSER_REGISTER_REQUEST,\n\tUSER_REGISTER_SUCCESS,\n\tUSER_REGISTER_FAILURE,\n\tUSER_RESET_PASSWORD_REQUEST,\n\tUSER_RESET_PASSWORD_SUCCESS,\n\tUSER_RESET_PASSWORD_FAILURE,\n\tUSER_EMAIL_VERIFICATION_REQUEST,\n\tUSER_EMAIL_VERIFICATION_SUCCESS,\n\tUSER_EMAIL_VERIFICATION_FAILURE,\n\tUSER_CONFIRM_REQUEST,\n\tUSER_CONFIRM_SUCCESS,\n\tUSER_CONFIRM_FAILURE,\n\tUSER_DETAILS_REQUEST,\n\tUSER_DETAILS_SUCCESS,\n\tUSER_DETAILS_FAILURE,\n\tUSER_DETAILS_RESET,\n\tUSER_PROFILE_UPDATE_REQUEST,\n\tUSER_PROFILE_UPDATE_SUCCESS,\n\tUSER_PROFILE_UPDATE_FAILURE,\n\tUSER_LIST_REQUEST,\n\tUSER_LIST_SUCCESS,\n\tUSER_LIST_FAILURE,\n\tUSER_DELETE_REQUEST,\n\tUSER_DELETE_SUCCESS,\n\tUSER_DELETE_FAILURE,\n\tUSER_UPDATE_REQUEST,\n\tUSER_UPDATE_SUCCESS,\n\tUSER_UPDATE_FAILURE,\n} from '../constants/userConstants';\nimport {\n\tORDER_CREATE_RESET,\n\tORDER_USER_LIST_RESET,\n} from '../constants/orderConstants';\nimport axios from 'axios';\n\n// login an user, can be a social login or a normal email verified login\nexport const loginUser = (email, password) => async (dispatch) => {\n\ttry {\n\t\tdispatch({ type: USER_LOGIN_REQUEST });\n\n\t\tconst config = {\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t};\n\n\t\tconst { data } = await axios.post(\n\t\t\t'/api/users/login',\n\t\t\t{ email, password },\n\t\t\tconfig\n\t\t);\n\n\t\tdispatch({\n\t\t\ttype: USER_LOGIN_SUCCESS,\n\t\t\tpayload: { ...data, isSocialLogin: false },\n\t\t});\n\t\tdispatch({\n\t\t\ttype: USER_LOGIN_REFRESH_SUCCESS,\n\t\t\tpayload: data.refreshToken,\n\t\t});\n\t\t// store the refresh token and the rest of the user info in the local storage\n\t\tlocalStorage.setItem('refreshToken', data.refreshToken);\n\t\tlocalStorage.setItem(\n\t\t\t'userInfo',\n\t\t\tJSON.stringify({ ...data, isSocialLogin: false })\n\t\t);\n\t\t// remove the variable that helps prompt the user that email is not verified, each time they login\n\t\tlocalStorage.removeItem('promptEmailVerfication');\n\t} catch (error) {\n\t\tdispatch({\n\t\t\ttype: USER_LOGIN_FAILURE,\n\t\t\tpayload:\n\t\t\t\terror.response && error.response.data.message\n\t\t\t\t\t? error.response.data.message\n\t\t\t\t\t: error.message,\n\t\t});\n\t}\n};\n\n// used for refreshing the access tokens when the user logs in using email and password\nexport const refreshLogin = (email) => async (dispatch, getState) => {\n\ttry {\n\t\tdispatch({ type: USER_LOGIN_REFRESH_REQUEST });\n\t\tconst {\n\t\t\tuserLogin: { userInfo },\n\t\t} = getState();\n\n\t\t// avoid this if social login\n\t\tif (userInfo.isSocialLogin) {\n\t\t\tdispatch({ type: USER_LOGIN_REFRESH_SUCCESS, payload: null });\n\t\t} else {\n\t\t\tconst config = {\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tconst { data } = await axios.post(\n\t\t\t\t'/api/users/refresh',\n\t\t\t\t{\n\t\t\t\t\temail,\n\t\t\t\t\ttoken: userInfo.refreshToken,\n\t\t\t\t},\n\t\t\t\tconfig\n\t\t\t);\n\n\t\t\tif (data.success) {\n\t\t\t\tdispatch({ type: USER_LOGIN_REFRESH_SUCCESS, payload: data });\n\t\t\t\tconst updatedUser = {\n\t\t\t\t\t...userInfo,\n\t\t\t\t\taccessToken: data.accessToken,\n\t\t\t\t\trefreshToken: userInfo.refreshToken,\n\t\t\t\t};\n\t\t\t\t// update the local storage\n\t\t\t\tlocalStorage.setItem('userInfo', JSON.stringify(updatedUser));\n\t\t\t\tdispatch({ type: USER_LOGIN_SUCCESS, payload: updatedUser });\n\t\t\t} else if (!data.success) {\n\t\t\t\t// set a variable in local storage which redirects to login page, if this refresh thing fails\n\t\t\t\tlocalStorage.removeItem('userInfo');\n\t\t\t\tlocalStorage.setItem('redirectLogin', 'true'); // after refresh token also expires, redirect to login page after loggin out the user\n\t\t\t\tdispatch({ type: USER_LOGOUT });\n\t\t\t}\n\t\t}\n\t} catch (error) {\n\t\tdispatch({\n\t\t\ttype: USER_LOGIN_REFRESH_FAILURE,\n\t\t\tpayload:\n\t\t\t\terror.response && error.response.data.message\n\t\t\t\t\t? error.response.data.message\n\t\t\t\t\t: error.message,\n\t\t});\n\t}\n};\n\n// logout by removing all local storage info\nexport const logoutUser = () => (dispatch) => {\n\tlocalStorage.removeItem('userInfo');\n\tlocalStorage.removeItem('redirectLogin');\n\tlocalStorage.removeItem('cartItems');\n\tdispatch({ type: USER_LOGOUT });\n\tdispatch({ type: USER_DETAILS_RESET });\n\tdispatch({ type: ORDER_CREATE_RESET });\n\tdispatch({ type: ORDER_USER_LIST_RESET });\n};\n\n// register a new user with the form for name, email, password\nexport const registerUser = (name, email, password) => async (dispatch) => {\n\ttry {\n\t\tdispatch({ type: USER_REGISTER_REQUEST });\n\t\tconst config = {\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t};\n\n\t\tconst { data } = await axios.post(\n\t\t\t'/api/users/',\n\t\t\t{ name, email, password },\n\t\t\tconfig\n\t\t);\n\n\t\tdispatch({ type: USER_REGISTER_SUCCESS, payload: data });\n\t} catch (error) {\n\t\tdispatch({\n\t\t\ttype: USER_REGISTER_FAILURE,\n\t\t\tpayload:\n\t\t\t\terror.response && error.response.data.message\n\t\t\t\t\t? error.response.data.message\n\t\t\t\t\t: error.message,\n\t\t});\n\t}\n};\n\n// send an email for verification of the newly registered account\nexport const sendVerficationEmail = (email) => async (dispatch) => {\n\ttry {\n\t\tdispatch({ type: USER_EMAIL_VERIFICATION_REQUEST });\n\t\tconst config = {\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t};\n\n\t\tconst { data } = await axios.post(\n\t\t\t'/api/users/confirm',\n\t\t\t{ email },\n\t\t\tconfig\n\t\t);\n\t\tdispatch({ type: USER_EMAIL_VERIFICATION_SUCCESS, payload: data });\n\t} catch (error) {\n\t\tdispatch({\n\t\t\ttype: USER_EMAIL_VERIFICATION_FAILURE,\n\t\t\tpayload:\n\t\t\t\terror.response && error.response.data.message\n\t\t\t\t\t? error.response.data.message\n\t\t\t\t\t: error.message,\n\t\t});\n\t}\n};\n\n// take the email token sent from the mail, and confirm the account once the link is clicked\nexport const confirmUser =\n\t(emailToken, alreadyLoggedIn = false) =>\n\tasync (dispatch, getState) => {\n\t\ttry {\n\t\t\tdispatch({ type: USER_CONFIRM_REQUEST });\n\t\t\tconst { data } = await axios.get(\n\t\t\t\t`/api/users/confirm/${emailToken}`\n\t\t\t);\n\n\t\t\t// remove variable meant to prompt the user for email verification\n\t\t\tlocalStorage.removeItem('promptEmailVerfication');\n\t\t\tdispatch({ type: USER_CONFIRM_SUCCESS, payload: true });\n\n\t\t\tif (alreadyLoggedIn) {\n\t\t\t\tdispatch({ type: USER_LOGIN_SUCCESS, payload: data });\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: USER_LOGIN_REFRESH_SUCCESS,\n\t\t\t\t\tpayload: data.refreshToken,\n\t\t\t\t});\n\t\t\t\tlocalStorage.setItem('refreshToken', data.refreshToken);\n\t\t\t\tlocalStorage.setItem('userInfo', JSON.stringify(data));\n\t\t\t}\n\n\t\t\tlocalStorage.removeItem('promptEmailVerfication');\n\t\t} catch (error) {\n\t\t\tdispatch({\n\t\t\t\ttype: USER_CONFIRM_FAILURE,\n\t\t\t\tpayload:\n\t\t\t\t\terror.response && error.response.data.message\n\t\t\t\t\t\t? error.response.data.message\n\t\t\t\t\t\t: error.message,\n\t\t\t});\n\t\t}\n\t};\n\n// reset the user password and send one more verification email from the server\nexport const resetUserPassword =\n\t(passwordToken, password) => async (dispatch) => {\n\t\ttry {\n\t\t\tdispatch({ type: USER_RESET_PASSWORD_REQUEST });\n\n\t\t\t// make the api call to reset the password\n\t\t\tconst config = {\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tconst { data } = await axios.put(\n\t\t\t\t'/api/users/reset',\n\t\t\t\t{ passwordToken, password },\n\t\t\t\tconfig\n\t\t\t);\n\n\t\t\tdispatch({ type: USER_RESET_PASSWORD_SUCCESS, payload: data });\n\t\t} catch (error) {\n\t\t\tdispatch({\n\t\t\t\ttype: USER_RESET_PASSWORD_FAILURE,\n\t\t\t\tpayload:\n\t\t\t\t\terror.response && error.response.data.message\n\t\t\t\t\t\t? error.response.data.message\n\t\t\t\t\t\t: error.message,\n\t\t\t});\n\t\t}\n\t};\n\n// get user details for profile page\nexport const getUserDetails = (id) => async (dispatch, getState) => {\n\ttry {\n\t\tdispatch({ type: USER_DETAILS_REQUEST });\n\n\t\tconst {\n\t\t\tuserLogin: { userInfo },\n\t\t} = getState();\n\n\t\tif (userInfo.isSocialLogin) {\n\t\t\tconst config = {\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tlet { data } = await axios.post(\n\t\t\t\t'/api/users/passport/data/',\n\t\t\t\t{ id },\n\t\t\t\tconfig\n\t\t\t);\n\t\t\tdispatch({\n\t\t\t\ttype: USER_DETAILS_SUCCESS,\n\t\t\t\tpayload: { ...data, isSocialLogin: true },\n\t\t\t});\n\t\t} else {\n\t\t\tconst config = {\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\tAuthorization: `Bearer ${userInfo.accessToken}`,\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tconst { data } = await axios.get(`/api/users/${id}`, config);\n\t\t\tdispatch({\n\t\t\t\ttype: USER_DETAILS_SUCCESS,\n\t\t\t\tpayload: { ...data, isSocialLogin: false },\n\t\t\t});\n\t\t}\n\t} catch (error) {\n\t\tdispatch({\n\t\t\ttype: USER_DETAILS_FAILURE,\n\t\t\tpayload:\n\t\t\t\terror.response && error.response.data.message\n\t\t\t\t\t? error.response.data.message\n\t\t\t\t\t: error.message,\n\t\t});\n\t}\n};\n\n// update details in the user profile page\nexport const updateUserProfile = (user) => async (dispatch, getState) => {\n\ttry {\n\t\tdispatch({ type: USER_PROFILE_UPDATE_REQUEST });\n\n\t\tconst {\n\t\t\tuserLogin: { userInfo },\n\t\t} = getState();\n\n\t\t// different headers are used when it is a social login, and when it is a std email login\n\t\tconst config = userInfo.isSocialLogin\n\t\t\t? {\n\t\t\t\t\theaders: {\n\t\t\t\t\t\tAuthorization: `SocialLogin ${userInfo.id}`,\n\t\t\t\t\t},\n\t\t\t  }\n\t\t\t: {\n\t\t\t\t\theaders: {\n\t\t\t\t\t\tAuthorization: `Bearer ${userInfo.accessToken}`,\n\t\t\t\t\t},\n\t\t\t  };\n\n\t\tconst isSocial = userInfo.isSocialLogin;\n\t\tconst { data } = await axios.put('/api/users/profile', user, config);\n\n\t\tdispatch({\n\t\t\ttype: USER_PROFILE_UPDATE_SUCCESS,\n\t\t\tpayload: { ...data, isSocialLogin: isSocial },\n\t\t});\n\n\t\t// login the user after updating the information\n\t\tdispatch({\n\t\t\ttype: USER_LOGIN_SUCCESS,\n\t\t\tpayload: { ...data, isSocialLogin: isSocial },\n\t\t});\n\n\t\tlocalStorage.setItem(\n\t\t\t'userInfo',\n\t\t\tJSON.stringify({ ...data, isSocialLogin: isSocial })\n\t\t);\n\t} catch (error) {\n\t\tdispatch({\n\t\t\ttype: USER_PROFILE_UPDATE_FAILURE,\n\t\t\tpayload:\n\t\t\t\terror.response && error.response.data.message\n\t\t\t\t\t? error.response.data.message\n\t\t\t\t\t: error.message,\n\t\t});\n\t}\n};\n\n// fetch a list of all users, for the admin panel view\nexport const listAllUsers =\n\t(pageNumber = '') =>\n\tasync (dispatch, getState) => {\n\t\ttry {\n\t\t\tdispatch({ type: USER_LIST_REQUEST });\n\n\t\t\tconst {\n\t\t\t\tuserLogin: { userInfo },\n\t\t\t} = getState();\n\n\t\t\t// different headers are used when it is a social login, and when it is a std email login\n\t\t\tconst config = userInfo.isSocialLogin\n\t\t\t\t? {\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\tAuthorization: `SocialLogin ${userInfo.id}`,\n\t\t\t\t\t\t},\n\t\t\t\t  }\n\t\t\t\t: {\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\tAuthorization: `Bearer ${userInfo.accessToken}`,\n\t\t\t\t\t\t},\n\t\t\t\t  };\n\n\t\t\tconst { data } = await axios.get(\n\t\t\t\t`/api/users?pageNumber=${pageNumber}`,\n\t\t\t\tconfig\n\t\t\t);\n\n\t\t\tdispatch({ type: USER_LIST_SUCCESS, payload: data });\n\t\t} catch (error) {\n\t\t\tdispatch({\n\t\t\t\ttype: USER_LIST_FAILURE,\n\t\t\t\tpayload:\n\t\t\t\t\terror.response && error.response.data.message\n\t\t\t\t\t\t? error.response.data.message\n\t\t\t\t\t\t: error.message,\n\t\t\t});\n\t\t}\n\t};\n\n// delete the user from the admin panel view\nexport const deleteUser = (id) => async (dispatch, getState) => {\n\ttry {\n\t\tdispatch({ type: USER_DELETE_REQUEST });\n\n\t\tconst {\n\t\t\tuserLogin: { userInfo },\n\t\t} = getState();\n\n\t\t// different headers are used when it is a social login, and when it is a std email login\n\t\tconst config = userInfo.isSocialLogin\n\t\t\t? {\n\t\t\t\t\theaders: {\n\t\t\t\t\t\tAuthorization: `SocialLogin ${userInfo.id}`,\n\t\t\t\t\t},\n\t\t\t  }\n\t\t\t: {\n\t\t\t\t\theaders: {\n\t\t\t\t\t\tAuthorization: `Bearer ${userInfo.accessToken}`,\n\t\t\t\t\t},\n\t\t\t  };\n\n\t\tawait axios.delete(`/api/users/${id}`, config);\n\n\t\tdispatch({ type: USER_DELETE_SUCCESS });\n\t} catch (error) {\n\t\tdispatch({\n\t\t\ttype: USER_DELETE_FAILURE,\n\t\t\tpayload:\n\t\t\t\terror.response && error.response.data.message\n\t\t\t\t\t? error.response.data.message\n\t\t\t\t\t: error.message,\n\t\t});\n\t}\n};\n\n// update the user details\nexport const updateUser = (user) => async (dispatch, getState) => {\n\ttry {\n\t\tdispatch({ type: USER_UPDATE_REQUEST });\n\n\t\tconst {\n\t\t\tuserLogin: { userInfo },\n\t\t} = getState();\n\n\t\tconst config = userInfo.isSocialLogin\n\t\t\t? {\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t\tAuthorization: `SocialLogin ${userInfo.id}`,\n\t\t\t\t\t},\n\t\t\t  }\n\t\t\t: {\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t\tAuthorization: `Bearer ${userInfo.accessToken}`,\n\t\t\t\t\t},\n\t\t\t  };\n\n\t\tconst isSocial = userInfo.isSocialLogin;\n\t\tconst { data } = await axios.put(\n\t\t\t`/api/users/${user._id}`,\n\t\t\tuser,\n\t\t\tconfig\n\t\t);\n\n\t\tdispatch({ type: USER_UPDATE_SUCCESS });\n\t\tdispatch({\n\t\t\ttype: USER_DETAILS_SUCCESS,\n\t\t\tpayload: { ...data, isSocialLogin: isSocial },\n\t\t});\n\n\t\tif (data.id === userInfo.id) {\n\t\t\t// // login the user after updating the information\n\t\t\tconst newUserInfo = {\n\t\t\t\t...userInfo,\n\t\t\t\t...userInfo,\n\t\t\t\tid: data.id,\n\t\t\t\tname: data.name,\n\t\t\t\temail: data.email,\n\t\t\t\tisAdmin: data.isAdmin,\n\t\t\t\tisConfirmed: data.isConfirmed,\n\t\t\t};\n\t\t\tdispatch({\n\t\t\t\ttype: USER_LOGIN_SUCCESS,\n\t\t\t\tpayload: newUserInfo,\n\t\t\t});\n\n\t\t\tlocalStorage.setItem('userInfo', JSON.stringify(newUserInfo));\n\t\t}\n\t} catch (error) {\n\t\tdispatch({\n\t\t\ttype: USER_UPDATE_FAILURE,\n\t\t\tpayload:\n\t\t\t\terror.response && error.response.data.message\n\t\t\t\t\t? error.response.data.message\n\t\t\t\t\t: error.message,\n\t\t});\n\t}\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}