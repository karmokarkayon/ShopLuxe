{"ast":null,"code":"import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { productListReducer, productDetailsReducer, productDeleteReducer, productCreateReducer, productCreateReviewReducer, productUpdateReducer, productTopRatedReducer } from './reducers/productReducers';\nimport { cartReducer } from './reducers/cartReducers';\nimport { userLoginReducer, userLoginRefreshReducer, userRegisterReducer, userSendEmailVerficationReducer, userConfirmReducer, userResetPasswordReducer, userDetailsReducer, userProfileUpdateReducer, userListReducer, userDeleteReducer, userUpdateReducer } from './reducers/userReducers';\nimport { orderCreateReducer, orderDetailsReducer, orderPayReducer, orderDeliverReducer, orderListUserReducer, orderListAllReducer } from './reducers/orderReducers';\n\n// combine all the above reducers to the store\nconst reducer = combineReducers({\n  productList: productListReducer,\n  productDetails: productDetailsReducer,\n  productDelete: productDeleteReducer,\n  productCreate: productCreateReducer,\n  productCreateReview: productCreateReviewReducer,\n  productUpdate: productUpdateReducer,\n  productTopRated: productTopRatedReducer,\n  cart: cartReducer,\n  userLogin: userLoginReducer,\n  userLoginRefresh: userLoginRefreshReducer,\n  userRegister: userRegisterReducer,\n  userSendEmailVerfication: userSendEmailVerficationReducer,\n  userConfirm: userConfirmReducer,\n  userResetPassword: userResetPasswordReducer,\n  userDetails: userDetailsReducer,\n  userProfileUpdate: userProfileUpdateReducer,\n  userList: userListReducer,\n  userDelete: userDeleteReducer,\n  userUpdate: userUpdateReducer,\n  orderCreate: orderCreateReducer,\n  orderDetails: orderDetailsReducer,\n  orderPay: orderPayReducer,\n  orderDeliver: orderDeliverReducer,\n  orderListUser: orderListUserReducer,\n  orderListAll: orderListAllReducer\n});\n\n// get a few cart items from the local storage\nconst cartItemsFromLocalStorage = localStorage.getItem('cartItems') ? JSON.parse(localStorage.getItem('cartItems')) : [];\n\n// get the user info from local storage\nconst userInfoFromLocalStorage = localStorage.getItem('userInfo') ? JSON.parse(localStorage.getItem('userInfo')) : null;\n\n// get the shipping address from local storage\nconst shippingAddressFromLocalStorage = localStorage.getItem('shippingAddress') ? JSON.parse(localStorage.getItem('shippingAddress')) : {};\n\n// get refresh token from the local storage\nconst tokenInfoFromLocalStoage = localStorage.getItem('refreshToken') ? localStorage.getItem('refreshToken') : null;\n\n// set the initial state based on above local storage values\nconst initialState = {\n  cart: {\n    cartItems: [...cartItemsFromLocalStorage],\n    shippingAddress: shippingAddressFromLocalStorage\n  },\n  userLogin: {\n    userInfo: userInfoFromLocalStorage\n  },\n  userLoginRefresh: {\n    tokenInfo: tokenInfoFromLocalStoage\n  }\n};\n\n// user redux thunk for making async calls\nconst middleware = [thunk];\n\n// create the redux store\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware)));\nexport default store;","map":{"version":3,"names":["createStore","applyMiddleware","combineReducers","thunk","composeWithDevTools","productListReducer","productDetailsReducer","productDeleteReducer","productCreateReducer","productCreateReviewReducer","productUpdateReducer","productTopRatedReducer","cartReducer","userLoginReducer","userLoginRefreshReducer","userRegisterReducer","userSendEmailVerficationReducer","userConfirmReducer","userResetPasswordReducer","userDetailsReducer","userProfileUpdateReducer","userListReducer","userDeleteReducer","userUpdateReducer","orderCreateReducer","orderDetailsReducer","orderPayReducer","orderDeliverReducer","orderListUserReducer","orderListAllReducer","reducer","productList","productDetails","productDelete","productCreate","productCreateReview","productUpdate","productTopRated","cart","userLogin","userLoginRefresh","userRegister","userSendEmailVerfication","userConfirm","userResetPassword","userDetails","userProfileUpdate","userList","userDelete","userUpdate","orderCreate","orderDetails","orderPay","orderDeliver","orderListUser","orderListAll","cartItemsFromLocalStorage","localStorage","getItem","JSON","parse","userInfoFromLocalStorage","shippingAddressFromLocalStorage","tokenInfoFromLocalStoage","initialState","cartItems","shippingAddress","userInfo","tokenInfo","middleware","store"],"sources":["C:/Users/karmo/Downloads/Ecommerce Website/MERN-Ecommerce-main/frontend/src/store.js"],"sourcesContent":["import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport {\n\tproductListReducer,\n\tproductDetailsReducer,\n\tproductDeleteReducer,\n\tproductCreateReducer,\n\tproductCreateReviewReducer,\n\tproductUpdateReducer,\n\tproductTopRatedReducer,\n} from './reducers/productReducers';\n\nimport { cartReducer } from './reducers/cartReducers';\n\nimport {\n\tuserLoginReducer,\n\tuserLoginRefreshReducer,\n\tuserRegisterReducer,\n\tuserSendEmailVerficationReducer,\n\tuserConfirmReducer,\n\tuserResetPasswordReducer,\n\tuserDetailsReducer,\n\tuserProfileUpdateReducer,\n\tuserListReducer,\n\tuserDeleteReducer,\n\tuserUpdateReducer,\n} from './reducers/userReducers';\n\nimport {\n\torderCreateReducer,\n\torderDetailsReducer,\n\torderPayReducer,\n\torderDeliverReducer,\n\torderListUserReducer,\n\torderListAllReducer,\n} from './reducers/orderReducers';\n\n// combine all the above reducers to the store\nconst reducer = combineReducers({\n\tproductList: productListReducer,\n\tproductDetails: productDetailsReducer,\n\tproductDelete: productDeleteReducer,\n\tproductCreate: productCreateReducer,\n\tproductCreateReview: productCreateReviewReducer,\n\tproductUpdate: productUpdateReducer,\n\tproductTopRated: productTopRatedReducer,\n\tcart: cartReducer,\n\tuserLogin: userLoginReducer,\n\tuserLoginRefresh: userLoginRefreshReducer,\n\tuserRegister: userRegisterReducer,\n\tuserSendEmailVerfication: userSendEmailVerficationReducer,\n\tuserConfirm: userConfirmReducer,\n\tuserResetPassword: userResetPasswordReducer,\n\tuserDetails: userDetailsReducer,\n\tuserProfileUpdate: userProfileUpdateReducer,\n\tuserList: userListReducer,\n\tuserDelete: userDeleteReducer,\n\tuserUpdate: userUpdateReducer,\n\torderCreate: orderCreateReducer,\n\torderDetails: orderDetailsReducer,\n\torderPay: orderPayReducer,\n\torderDeliver: orderDeliverReducer,\n\torderListUser: orderListUserReducer,\n\torderListAll: orderListAllReducer,\n});\n\n// get a few cart items from the local storage\nconst cartItemsFromLocalStorage = localStorage.getItem('cartItems')\n\t? JSON.parse(localStorage.getItem('cartItems'))\n\t: [];\n\n// get the user info from local storage\nconst userInfoFromLocalStorage = localStorage.getItem('userInfo')\n\t? JSON.parse(localStorage.getItem('userInfo'))\n\t: null;\n\n// get the shipping address from local storage\nconst shippingAddressFromLocalStorage = localStorage.getItem('shippingAddress')\n\t? JSON.parse(localStorage.getItem('shippingAddress'))\n\t: {};\n\n// get refresh token from the local storage\nconst tokenInfoFromLocalStoage = localStorage.getItem('refreshToken')\n\t? localStorage.getItem('refreshToken')\n\t: null;\n\n// set the initial state based on above local storage values\nconst initialState = {\n\tcart: {\n\t\tcartItems: [...cartItemsFromLocalStorage],\n\t\tshippingAddress: shippingAddressFromLocalStorage,\n\t},\n\tuserLogin: {\n\t\tuserInfo: userInfoFromLocalStorage,\n\t},\n\tuserLoginRefresh: {\n\t\ttokenInfo: tokenInfoFromLocalStoage,\n\t},\n};\n\n// user redux thunk for making async calls\nconst middleware = [thunk];\n\n// create the redux store\nconst store = createStore(\n\treducer,\n\tinitialState,\n\tcomposeWithDevTools(applyMiddleware(...middleware))\n);\n\nexport default store;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}