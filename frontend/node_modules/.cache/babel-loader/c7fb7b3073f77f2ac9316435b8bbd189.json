{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\karmo\\\\Downloads\\\\Ecommerce Website\\\\MERN-Ecommerce-main\\\\frontend\\\\src\\\\components\\\\CheckoutForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Form, Button } from 'react-bootstrap';\nimport { payOrder } from '../actions/orderActions';\nimport { savePaymentMethod } from '../actions/cartActions';\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js'; // for stripe CC component\nimport Message from '../components/Message';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CheckoutForm = _ref => {\n  _s();\n  let {\n    price,\n    orderID\n  } = _ref;\n  const [error, setError] = useState(''); // from the stripe component itself\n  const dispatch = useDispatch();\n  const [clientSecret, setClientSecret] = useState(''); // from the payment intent sent from server\n  const stripe = useStripe();\n  const elements = useElements();\n  const userLogin = useSelector(state => state.userLogin);\n  const {\n    userInfo\n  } = userLogin;\n\n  // STEP 1: create a payment intent and getting the secret\n  useEffect(() => {\n    const getClientSecret = async () => {\n      const {\n        data\n      } = await axios.post('/api/orders/stripe-payment', {\n        price,\n        email: userInfo.email\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      setClientSecret(data.clientSecret);\n    };\n    if (userInfo && price) getClientSecret();\n  }, [price, userInfo]);\n\n  // STEP 2: make the payment after filling the form properly\n  const makePayment = async e => {\n    e.preventDefault();\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make  sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n    if (clientSecret) {\n      const payload = await stripe.confirmCardPayment(clientSecret, {\n        payment_method: {\n          card: elements.getElement(CardElement),\n          billing_details: {\n            name: userInfo.name,\n            email: userInfo.email\n          }\n        }\n      });\n      // console.log(payload.error);\n      if (!payload.error) {\n        dispatch(savePaymentMethod('Stripe'));\n        dispatch(payOrder(orderID, {\n          ...payload.paymentIntent,\n          paymentMode: 'stripe'\n        }));\n      } else {\n        setError(payload.error.message);\n      }\n    } else {\n      window.location.reload();\n    }\n  };\n\n  // render a checkout form for filling details about credit or debit cards\n  return /*#__PURE__*/_jsxDEV(Form, {\n    id: \"payment-form\",\n    onSubmit: makePayment,\n    children: [error && /*#__PURE__*/_jsxDEV(Message, {\n      dismissible: true,\n      variant: \"danger\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n      style: {\n        margin: '1em 0',\n        fontSize: '1em'\n      },\n      children: /*#__PURE__*/_jsxDEV(CardElement, {\n        options: {\n          style: {\n            base: {\n              fontSize: '16px',\n              color: '#424770',\n              '::placeholder': {\n                color: '#aab7c4'\n              }\n            },\n            invalid: {\n              color: '#9e2146'\n            }\n          }\n        },\n        id: \"card-element\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-grid\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        disabled: !stripe,\n        size: \"lg\",\n        type: \"submit\",\n        children: \"Pay Now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 3\n  }, this);\n};\n_s(CheckoutForm, \"LQ0G+PWWLUagtfbHHohld4CpXXw=\", false, function () {\n  return [useDispatch, useStripe, useElements, useSelector];\n});\n_c = CheckoutForm;\nexport default CheckoutForm;\nvar _c;\n$RefreshReg$(_c, \"CheckoutForm\");","map":{"version":3,"names":["React","useState","useEffect","axios","useDispatch","useSelector","Form","Button","payOrder","savePaymentMethod","CardElement","useStripe","useElements","Message","jsxDEV","_jsxDEV","CheckoutForm","_ref","_s","price","orderID","error","setError","dispatch","clientSecret","setClientSecret","stripe","elements","userLogin","state","userInfo","getClientSecret","data","post","email","headers","makePayment","e","preventDefault","payload","confirmCardPayment","payment_method","card","getElement","billing_details","name","paymentIntent","paymentMode","message","window","location","reload","id","onSubmit","children","dismissible","variant","fileName","_jsxFileName","lineNumber","columnNumber","Group","style","margin","fontSize","options","base","color","invalid","className","disabled","size","type","_c","$RefreshReg$"],"sources":["C:/Users/karmo/Downloads/Ecommerce Website/MERN-Ecommerce-main/frontend/src/components/CheckoutForm.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Form, Button } from 'react-bootstrap';\nimport { payOrder } from '../actions/orderActions';\nimport { savePaymentMethod } from '../actions/cartActions';\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js'; // for stripe CC component\nimport Message from '../components/Message';\n\nconst CheckoutForm = ({ price, orderID }) => {\n\tconst [error, setError] = useState(''); // from the stripe component itself\n\tconst dispatch = useDispatch();\n\tconst [clientSecret, setClientSecret] = useState(''); // from the payment intent sent from server\n\tconst stripe = useStripe();\n\tconst elements = useElements();\n\n\tconst userLogin = useSelector((state) => state.userLogin);\n\tconst { userInfo } = userLogin;\n\n\t// STEP 1: create a payment intent and getting the secret\n\tuseEffect(() => {\n\t\tconst getClientSecret = async () => {\n\t\t\tconst { data } = await axios.post(\n\t\t\t\t'/api/orders/stripe-payment',\n\t\t\t\t{ price, email: userInfo.email },\n\t\t\t\t{\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t);\n\t\t\tsetClientSecret(data.clientSecret);\n\t\t};\n\n\t\tif (userInfo && price) getClientSecret();\n\t}, [price, userInfo]);\n\n\t// STEP 2: make the payment after filling the form properly\n\tconst makePayment = async (e) => {\n\t\te.preventDefault();\n\t\tif (!stripe || !elements) {\n\t\t\t// Stripe.js has not yet loaded.\n\t\t\t// Make  sure to disable form submission until Stripe.js has loaded.\n\t\t\treturn;\n\t\t}\n\t\tif (clientSecret) {\n\t\t\tconst payload = await stripe.confirmCardPayment(clientSecret, {\n\t\t\t\tpayment_method: {\n\t\t\t\t\tcard: elements.getElement(CardElement),\n\t\t\t\t\tbilling_details: {\n\t\t\t\t\t\tname: userInfo.name,\n\t\t\t\t\t\temail: userInfo.email,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t});\n\t\t\t// console.log(payload.error);\n\t\t\tif (!payload.error) {\n\t\t\t\tdispatch(savePaymentMethod('Stripe'));\n\t\t\t\tdispatch(\n\t\t\t\t\tpayOrder(orderID, {\n\t\t\t\t\t\t...payload.paymentIntent,\n\t\t\t\t\t\tpaymentMode: 'stripe',\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tsetError(payload.error.message);\n\t\t\t}\n\t\t} else {\n\t\t\twindow.location.reload();\n\t\t}\n\t};\n\n\t// render a checkout form for filling details about credit or debit cards\n\treturn (\n\t\t<Form id='payment-form' onSubmit={makePayment}>\n\t\t\t{error && (\n\t\t\t\t<Message dismissible variant='danger'>\n\t\t\t\t\t{error}\n\t\t\t\t</Message>\n\t\t\t)}\n\t\t\t<Form.Group\n\t\t\t\tstyle={{\n\t\t\t\t\tmargin: '1em 0',\n\t\t\t\t\tfontSize: '1em',\n\t\t\t\t}}>\n\t\t\t\t<CardElement\n\t\t\t\t\toptions={{\n\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\tbase: {\n\t\t\t\t\t\t\t\tfontSize: '16px',\n\t\t\t\t\t\t\t\tcolor: '#424770',\n\t\t\t\t\t\t\t\t'::placeholder': {\n\t\t\t\t\t\t\t\t\tcolor: '#aab7c4',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tinvalid: {\n\t\t\t\t\t\t\t\tcolor: '#9e2146',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t}}\n\t\t\t\t\tid='card-element'\n\t\t\t\t/>\n\t\t\t</Form.Group>\n\t\t\t<div className='d-grid'>\n\t\t\t\t<Button disabled={!stripe} size='lg' type='submit'>\n\t\t\t\t\tPay Now\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t</Form>\n\t);\n};\n\nexport default CheckoutForm;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,IAAI,EAAEC,MAAM,QAAQ,iBAAiB;AAC9C,SAASC,QAAQ,QAAQ,yBAAyB;AAClD,SAASC,iBAAiB,QAAQ,wBAAwB;AAC1D,SAASC,WAAW,EAAEC,SAAS,EAAEC,WAAW,QAAQ,yBAAyB,CAAC,CAAC;AAC/E,OAAOC,OAAO,MAAM,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,YAAY,GAAGC,IAAA,IAAwB;EAAAC,EAAA;EAAA,IAAvB;IAAEC,KAAK;IAAEC;EAAQ,CAAC,GAAAH,IAAA;EACvC,MAAM,CAACI,KAAK,EAAEC,QAAQ,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACxC,MAAMsB,QAAQ,GAAGnB,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACoB,YAAY,EAAEC,eAAe,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACtD,MAAMyB,MAAM,GAAGf,SAAS,CAAC,CAAC;EAC1B,MAAMgB,QAAQ,GAAGf,WAAW,CAAC,CAAC;EAE9B,MAAMgB,SAAS,GAAGvB,WAAW,CAAEwB,KAAK,IAAKA,KAAK,CAACD,SAAS,CAAC;EACzD,MAAM;IAAEE;EAAS,CAAC,GAAGF,SAAS;;EAE9B;EACA1B,SAAS,CAAC,MAAM;IACf,MAAM6B,eAAe,GAAG,MAAAA,CAAA,KAAY;MACnC,MAAM;QAAEC;MAAK,CAAC,GAAG,MAAM7B,KAAK,CAAC8B,IAAI,CAChC,4BAA4B,EAC5B;QAAEd,KAAK;QAAEe,KAAK,EAAEJ,QAAQ,CAACI;MAAM,CAAC,EAChC;QACCC,OAAO,EAAE;UACR,cAAc,EAAE;QACjB;MACD,CACD,CAAC;MACDV,eAAe,CAACO,IAAI,CAACR,YAAY,CAAC;IACnC,CAAC;IAED,IAAIM,QAAQ,IAAIX,KAAK,EAAEY,eAAe,CAAC,CAAC;EACzC,CAAC,EAAE,CAACZ,KAAK,EAAEW,QAAQ,CAAC,CAAC;;EAErB;EACA,MAAMM,WAAW,GAAG,MAAOC,CAAC,IAAK;IAChCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,IAAI,CAACZ,MAAM,IAAI,CAACC,QAAQ,EAAE;MACzB;MACA;MACA;IACD;IACA,IAAIH,YAAY,EAAE;MACjB,MAAMe,OAAO,GAAG,MAAMb,MAAM,CAACc,kBAAkB,CAAChB,YAAY,EAAE;QAC7DiB,cAAc,EAAE;UACfC,IAAI,EAAEf,QAAQ,CAACgB,UAAU,CAACjC,WAAW,CAAC;UACtCkC,eAAe,EAAE;YAChBC,IAAI,EAAEf,QAAQ,CAACe,IAAI;YACnBX,KAAK,EAAEJ,QAAQ,CAACI;UACjB;QACD;MACD,CAAC,CAAC;MACF;MACA,IAAI,CAACK,OAAO,CAAClB,KAAK,EAAE;QACnBE,QAAQ,CAACd,iBAAiB,CAAC,QAAQ,CAAC,CAAC;QACrCc,QAAQ,CACPf,QAAQ,CAACY,OAAO,EAAE;UACjB,GAAGmB,OAAO,CAACO,aAAa;UACxBC,WAAW,EAAE;QACd,CAAC,CACF,CAAC;MACF,CAAC,MAAM;QACNzB,QAAQ,CAACiB,OAAO,CAAClB,KAAK,CAAC2B,OAAO,CAAC;MAChC;IACD,CAAC,MAAM;MACNC,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC;IACzB;EACD,CAAC;;EAED;EACA,oBACCpC,OAAA,CAACT,IAAI;IAAC8C,EAAE,EAAC,cAAc;IAACC,QAAQ,EAAEjB,WAAY;IAAAkB,QAAA,GAC5CjC,KAAK,iBACLN,OAAA,CAACF,OAAO;MAAC0C,WAAW;MAACC,OAAO,EAAC,QAAQ;MAAAF,QAAA,EACnCjC;IAAK;MAAAoC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CACT,eACD7C,OAAA,CAACT,IAAI,CAACuD,KAAK;MACVC,KAAK,EAAE;QACNC,MAAM,EAAE,OAAO;QACfC,QAAQ,EAAE;MACX,CAAE;MAAAV,QAAA,eACFvC,OAAA,CAACL,WAAW;QACXuD,OAAO,EAAE;UACRH,KAAK,EAAE;YACNI,IAAI,EAAE;cACLF,QAAQ,EAAE,MAAM;cAChBG,KAAK,EAAE,SAAS;cAChB,eAAe,EAAE;gBAChBA,KAAK,EAAE;cACR;YACD,CAAC;YACDC,OAAO,EAAE;cACRD,KAAK,EAAE;YACR;UACD;QACD,CAAE;QACFf,EAAE,EAAC;MAAc;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACS,CAAC,eACb7C,OAAA;MAAKsD,SAAS,EAAC,QAAQ;MAAAf,QAAA,eACtBvC,OAAA,CAACR,MAAM;QAAC+D,QAAQ,EAAE,CAAC5C,MAAO;QAAC6C,IAAI,EAAC,IAAI;QAACC,IAAI,EAAC,QAAQ;QAAAlB,QAAA,EAAC;MAEnD;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAET,CAAC;AAAC1C,EAAA,CArGIF,YAAY;EAAA,QAEAZ,WAAW,EAEbO,SAAS,EACPC,WAAW,EAEVP,WAAW;AAAA;AAAAoE,EAAA,GAPxBzD,YAAY;AAuGlB,eAAeA,YAAY;AAAC,IAAAyD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}