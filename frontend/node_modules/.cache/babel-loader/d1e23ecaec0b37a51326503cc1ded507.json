{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\karmo\\\\Downloads\\\\Ecommerce Website\\\\MERN-Ecommerce-main\\\\frontend\\\\src\\\\ServiceWorkerWrapper.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ToastContainer, Toast } from 'react-bootstrap';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport './styles/update-toast.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ServiceWorkerWrapper = () => {\n  _s();\n  const [showReload, setShowReload] = useState(false);\n  const [waitingWorker, setWaitingWorker] = useState(null);\n  const onSWUpdate = registration => {\n    setShowReload(true);\n    setWaitingWorker(registration.waiting);\n  };\n\n  // register the service worker on page load\n  useEffect(() => {\n    serviceWorkerRegistration.register({\n      onUpdate: onSWUpdate\n    });\n  }, []);\n\n  // skip waiting and install new updates on page reload\n  const reloadPage = () => {\n    waitingWorker === null || waitingWorker === void 0 ? void 0 : waitingWorker.postMessage({\n      type: 'SKIP_WAITING'\n    });\n    setShowReload(false);\n    window.location.reload(true);\n  };\n  return /*#__PURE__*/_jsxDEV(ToastContainer, {\n    className: \"update-toast\",\n    onClick: reloadPage,\n    children: /*#__PURE__*/_jsxDEV(Toast, {\n      show: showReload,\n      onClose: reloadPage,\n      bg: \"dark\",\n      children: [/*#__PURE__*/_jsxDEV(Toast.Header, {\n        children: /*#__PURE__*/_jsxDEV(\"strong\", {\n          className: \"me-auto text-black\",\n          children: \"New Version Available\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Toast.Body, {\n        className: \"text-white\",\n        children: \"Reload to see whats new!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 3\n  }, this);\n};\n_s(ServiceWorkerWrapper, \"sIfDwlrEMUD2NPXq4TMqjWkHjIU=\");\n_c = ServiceWorkerWrapper;\nexport default ServiceWorkerWrapper;\nvar _c;\n$RefreshReg$(_c, \"ServiceWorkerWrapper\");","map":{"version":3,"names":["React","useState","useEffect","ToastContainer","Toast","serviceWorkerRegistration","jsxDEV","_jsxDEV","ServiceWorkerWrapper","_s","showReload","setShowReload","waitingWorker","setWaitingWorker","onSWUpdate","registration","waiting","register","onUpdate","reloadPage","postMessage","type","window","location","reload","className","onClick","children","show","onClose","bg","Header","fileName","_jsxFileName","lineNumber","columnNumber","Body","_c","$RefreshReg$"],"sources":["C:/Users/karmo/Downloads/Ecommerce Website/MERN-Ecommerce-main/frontend/src/ServiceWorkerWrapper.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { ToastContainer, Toast } from 'react-bootstrap';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport './styles/update-toast.css';\n\nconst ServiceWorkerWrapper = () => {\n\tconst [showReload, setShowReload] = useState(false);\n\tconst [waitingWorker, setWaitingWorker] = useState(null);\n\n\tconst onSWUpdate = (registration) => {\n\t\tsetShowReload(true);\n\t\tsetWaitingWorker(registration.waiting);\n\t};\n\n\t// register the service worker on page load\n\tuseEffect(() => {\n\t\tserviceWorkerRegistration.register({ onUpdate: onSWUpdate });\n\t}, []);\n\n\t// skip waiting and install new updates on page reload\n\tconst reloadPage = () => {\n\t\twaitingWorker?.postMessage({ type: 'SKIP_WAITING' });\n\t\tsetShowReload(false);\n\t\twindow.location.reload(true);\n\t};\n\n\treturn (\n\t\t<ToastContainer className='update-toast' onClick={reloadPage}>\n\t\t\t<Toast show={showReload} onClose={reloadPage} bg='dark'>\n\t\t\t\t<Toast.Header>\n\t\t\t\t\t<strong className='me-auto text-black'>\n\t\t\t\t\t\tNew Version Available\n\t\t\t\t\t</strong>\n\t\t\t\t</Toast.Header>\n\t\t\t\t<Toast.Body className='text-white'>\n\t\t\t\t\tReload to see whats new!\n\t\t\t\t</Toast.Body>\n\t\t\t</Toast>\n\t\t</ToastContainer>\n\t);\n};\n\nexport default ServiceWorkerWrapper;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,cAAc,EAAEC,KAAK,QAAQ,iBAAiB;AACvD,OAAO,KAAKC,yBAAyB,MAAM,6BAA6B;AACxE,OAAO,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,oBAAoB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClC,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACW,aAAa,EAAEC,gBAAgB,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAExD,MAAMa,UAAU,GAAIC,YAAY,IAAK;IACpCJ,aAAa,CAAC,IAAI,CAAC;IACnBE,gBAAgB,CAACE,YAAY,CAACC,OAAO,CAAC;EACvC,CAAC;;EAED;EACAd,SAAS,CAAC,MAAM;IACfG,yBAAyB,CAACY,QAAQ,CAAC;MAAEC,QAAQ,EAAEJ;IAAW,CAAC,CAAC;EAC7D,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMK,UAAU,GAAGA,CAAA,KAAM;IACxBP,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEQ,WAAW,CAAC;MAAEC,IAAI,EAAE;IAAe,CAAC,CAAC;IACpDV,aAAa,CAAC,KAAK,CAAC;IACpBW,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,IAAI,CAAC;EAC7B,CAAC;EAED,oBACCjB,OAAA,CAACJ,cAAc;IAACsB,SAAS,EAAC,cAAc;IAACC,OAAO,EAAEP,UAAW;IAAAQ,QAAA,eAC5DpB,OAAA,CAACH,KAAK;MAACwB,IAAI,EAAElB,UAAW;MAACmB,OAAO,EAAEV,UAAW;MAACW,EAAE,EAAC,MAAM;MAAAH,QAAA,gBACtDpB,OAAA,CAACH,KAAK,CAAC2B,MAAM;QAAAJ,QAAA,eACZpB,OAAA;UAAQkB,SAAS,EAAC,oBAAoB;UAAAE,QAAA,EAAC;QAEvC;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACI,CAAC,eACf5B,OAAA,CAACH,KAAK,CAACgC,IAAI;QAACX,SAAS,EAAC,YAAY;QAAAE,QAAA,EAAC;MAEnC;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACP;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACO,CAAC;AAEnB,CAAC;AAAC1B,EAAA,CAnCID,oBAAoB;AAAA6B,EAAA,GAApB7B,oBAAoB;AAqC1B,eAAeA,oBAAoB;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}